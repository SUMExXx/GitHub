import { app, autoUpdater, BrowserWindow, ipcMain, shell } from 'electron';
import path from 'path';
import dotenv from 'dotenv';
import fs from 'fs';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

dotenv.config();

// const server = 'https://your-update-server.com';
// const feedURL = `${server}/releases/${process.platform}-${process.arch}`;

// autoUpdater.setFeedURL({ url: feedURL });

// autoUpdater.checkForUpdatesAndNotify();

// autoUpdater.on('update-available', () => {
//   console.log('Update available');
// });

// autoUpdater.on('update-downloaded', () => {
//   autoUpdater.quitAndInstall();
// });

// autoUpdater.on('error', (err) => {
//   console.log('Error during update:', err);
// });

app.setName('AIOne');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minHeight: 400,
    minWidth: 600,
    frame: false,
    icon: path.join(__dirname, 'public/Github.ico'),
    webPreferences: {
      webviewTag: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.setTitle('AIOne');

  mainWindow.on('maximize', () => {
    if (mainWindow) {
      // Send fullscreen state to renderer process
      mainWindow.webContents.send('fullscreen-change', true);
    }
  });

  mainWindow.on('unmaximize', () => {
    if (mainWindow) {
      // Send fullscreen state to renderer process
      mainWindow.webContents.send('fullscreen-change', false);
    }
  });

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

ipcMain.on('minimize-window', () => {
    mainWindow.minimize();
});

ipcMain.on('maximize-window', () => {
    if (mainWindow) {
        if (mainWindow.isMaximized()) {
            mainWindow.unmaximize(); // Restore the window if it's maximized
        } else {
            mainWindow.maximize(); // Maximize the window
        }
    }
});

ipcMain.on('close-window', () => {
    if (mainWindow) {
        mainWindow.close(); // Close the window
    }
});

ipcMain.on("open-external", (event, url) => {
    shell.openExternal(url); // Opens URL in the default browser
});

ipcMain.handle('get-fullscreen', () => {
  return mainWindow ? mainWindow.isFullScreen() : false;
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('get-asset-image', async (event, relativePath) => {
    try {
        const imagePath = path.join(__dirname, "public", relativePath);
        const imageData = fs.readFileSync(imagePath);
        const base64Image = imageData.toString('base64');
        return `data:image/png;base64,${base64Image}`; // You can adjust the MIME type based on the image type
    } catch (error) {
        console.error('Error reading image:', error);
        return null;
    }
});
